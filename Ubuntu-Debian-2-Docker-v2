#!/bin/bash

# Docker化Ubuntu系统打包脚本
# 功能：将运行中的Ubuntu系统打包成高压缩率tar文件，适配Docker导入

# 安全检测：强制Root权限
if [[ $EUID -ne 0 ]]; then
    echo -e "\033[31m错误：此脚本必须使用sudo或root用户运行\033[0m"
    exit 1
fi

# 配置参数
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
OUTPUT_FILE="ubuntu-docker-${TIMESTAMP}.tar.xz"
COMPRESS_THREADS=$(nproc)  # 自动获取CPU核心数
XZ_OPTIONS="-9 -e --check=crc64 --threads=$COMPRESS_THREADS"

# 智能排除列表（可根据需要调整）
EXCLUDE_PATTERNS=(
    # 系统虚拟文件系统
    "/proc/*"
    "/sys/*"
    "/dev/*"
    "/tmp/*"
    
    # 运行时内容
    "/run/*"
    "/var/run/*"
    "/var/lock/*"
    
    # 存储挂载点
    "/mnt/*"
    "/media/*"
    
    # 特殊文件
    "/swapfile"
    "/lost+found"
    
    # 缓存与日志
    "/var/cache/apt/archives/*.deb"
    "/var/log/**/*.log"
    
    # 排除自身输出文件
    "$(pwd)/${OUTPUT_FILE}"
    "/var/lib/docker/*"  # Docker运行时目录
    "/.snapshots/*"      # Btrfs快照
)

# 构建排除参数
EXCLUDE_OPTS=()
for pattern in "${EXCLUDE_PATTERNS[@]}"; do
    EXCLUDE_OPTS+=(--exclude="$pattern")
done

# 开始打包流程
echo -e "\033[34m正在打包系统（压缩线程数：${COMPRESS_THREADS}）...\033[0m"

# 修正后的find命令：排除临时文件并安全处理特殊字符
time find / \( -name "*~" -o -name "*.swp" \) -prune -o -type f -print0 |
    /usr/bin/tar -cp \
        --null -T - \
        --one-file-system \
        --xattrs \
        --warning=no-xattr \
        "${EXCLUDE_OPTS[@]}" \
    | /usr/bin/xz $XZ_OPTIONS > "$OUTPUT_FILE"

# 结果校验
if [[ $? -eq 0 ]]; then
    echo -e "\033[32m打包成功！输出文件：$(realpath "${OUTPUT_FILE}")\033[0m"
    echo -e "导入Docker命令："
    echo -e "  \033[35mdocker import ${OUTPUT_FILE} ubuntu:custom-${TIMESTAMP}\033[0m"
else
    echo -e "\033[31m错误：打包过程失败，请检查存储空间和权限\033[0m"
    exit 1
fi
